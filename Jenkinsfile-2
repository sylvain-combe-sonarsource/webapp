pipeline {
  agent {
    docker {
      image 'mcr.microsoft.com/dotnet/sdk:6.0-focal'
    }
  }
  options {
    skipStagesAfterUnstable()
  }
  stages {
    stage('Build And SonarQube analysis') {
      steps {
        script {
          sh "sudo apt-get update"
          sh "sudo apt-get install --yes openjdk-11-jre"
          sh "dotnet tool install --global dotnet-sonarscanner"
          withSonarQubeEnv('SYCOLATEST') {
            sh "dotnet tool list -g" ;
            sh "dotnet --version" ;
            sh "dotnet sonarscanner begin /k:\"sylvain-combe-sonarsource_webapp\" "
            sh "dotnet build" ;
            sh "dotnet sonarscanner end"
          }
        }
      }
    }
    stage("Quality Gate") {
      steps {
        timeout(time: 1, unit: 'HOURS') {
          // Parameter indicates whether to set pipeline to UNSTABLE if Quality Gate fails
          // true = set pipeline to UNSTABLE, false = don't
          waitForQualityGate abortPipeline: true
        }
      }
    }
  }
}
